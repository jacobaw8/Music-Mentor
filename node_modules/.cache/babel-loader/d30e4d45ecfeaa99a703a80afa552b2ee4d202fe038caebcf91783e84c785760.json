{"ast":null,"code":"import _toConsumableArray from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport var StackActions = {\n  replace: function replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  push: function push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name: name,\n        params: params\n      }\n    };\n  },\n  pop: function pop() {\n    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    return {\n      type: 'POP',\n      payload: {\n        count: count\n      }\n    };\n  },\n  popToTop: function popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n};\nexport default function StackRouter(options) {\n  var router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n    getInitialState: function getInitialState(_ref) {\n      var routeNames = _ref.routeNames,\n        routeParamList = _ref.routeParamList;\n      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames: routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref2) {\n      var routeNames = _ref2.routeNames,\n        routeParamList = _ref2.routeParamList;\n      var state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name);\n      }).map(function (route) {\n        return _objectSpread(_objectSpread({}, route), {}, {\n          key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n          params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n        });\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames: routeNames,\n        routes: routes\n      };\n    },\n    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {\n      var routeNames = _ref3.routeNames,\n        routeParamList = _ref3.routeParamList,\n        routeKeyChanges = _ref3.routeKeyChanges;\n      var routes = state.routes.filter(function (route) {\n        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);\n      });\n      if (routes.length === 0) {\n        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames: routeNames,\n        routes: routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var index = state.routes.findIndex(function (r) {\n        return r.key === key;\n      });\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index: index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      var routeParamList = options.routeParamList;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            var _action$payload = action.payload,\n              name = _action$payload.name,\n              key = _action$payload.key,\n              params = _action$payload.params;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map(function (route, i) {\n                return i === index ? {\n                  key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                  name: name,\n                  params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n                } : route;\n              })\n            });\n          }\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            var getId = options.routeGetIdList[action.payload.name];\n            var id = getId === null || getId === void 0 ? void 0 : getId({\n              params: action.payload.params\n            });\n            var route = id ? state.routes.find(function (route) {\n              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({\n                params: route.params\n              }));\n            }) : undefined;\n            var routes;\n            if (route) {\n              routes = state.routes.filter(function (r) {\n                return r.key !== route.key;\n              });\n              routes.push(_objectSpread(_objectSpread({}, route), {}, {\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }));\n            } else {\n              routes = [].concat(_toConsumableArray(state.routes), [{\n                key: \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: routes.length - 1,\n              routes: routes\n            });\n          }\n          return null;\n        case 'POP':\n          {\n            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {\n              return r.key === action.source;\n            }) : state.index;\n            if (_index > 0) {\n              var count = Math.max(_index - action.payload.count + 1, 1);\n              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: _routes.length - 1,\n                routes: _routes\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'NAVIGATE':\n          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n          if (action.payload.key || action.payload.name) {\n            var _action$payload$path;\n            // If the route already exists, navigate to that\n            var _index2 = -1;\n            var _getId =\n            // `getId` and `key` can't be used together\n            action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;\n            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({\n              params: action.payload.params\n            });\n            if (_id) {\n              _index2 = state.routes.findIndex(function (route) {\n                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({\n                  params: route.params\n                }));\n              });\n            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              _index2 = state.index;\n            } else {\n              for (var i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  _index2 = i;\n                  break;\n                }\n              }\n            }\n            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n            if (_index2 === -1 && action.payload.name !== undefined) {\n              var _action$payload$key;\n              var _routes2 = [].concat(_toConsumableArray(state.routes), [{\n                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : \"\".concat(action.payload.name, \"-\").concat(nanoid()),\n                name: action.payload.name,\n                path: action.payload.path,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]);\n              return _objectSpread(_objectSpread({}, state), {}, {\n                routes: _routes2,\n                index: _routes2.length - 1\n              });\n            }\n            var _route = state.routes[_index2];\n            var _params;\n            if (action.payload.merge) {\n              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread(_objectSpread({}, routeParamList[_route.name]), _route.params), action.payload.params) : _route.params;\n            } else {\n              _params = routeParamList[_route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[_route.name]), action.payload.params) : action.payload.params;\n            }\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: _index2,\n              routes: [].concat(_toConsumableArray(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? _objectSpread(_objectSpread({}, _route), {}, {\n                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : _route.path,\n                params: _params\n              }) : state.routes[_index2]])\n            });\n          }\n          return null;\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":{"version":3,"names":["nanoid","BaseRouter","StackActions","replace","name","params","type","payload","push","pop","count","arguments","length","undefined","popToTop","StackRouter","options","router","_objectSpread","getInitialState","_ref","routeNames","routeParamList","initialRouteName","includes","stale","key","concat","index","routes","getRehydratedState","partialState","_ref2","state","filter","route","map","getStateForRouteNamesChange","_ref3","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","_action$payload","i","getId","routeGetIdList","id","find","_toConsumableArray","max","_action$payload$path","_action$payload$key","path","merge","actionCreators"],"sources":["C:\\Users\\Jacob\\Documents\\GitHub\\jacobaw8\\Music-Mentor\\node_modules\\@react-navigation\\routers\\src\\StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\r\n\r\nimport BaseRouter from './BaseRouter';\r\nimport type {\r\n  CommonNavigationAction,\r\n  DefaultRouterOptions,\r\n  NavigationState,\r\n  ParamListBase,\r\n  Route,\r\n  Router,\r\n} from './types';\r\n\r\nexport type StackActionType =\r\n  | {\r\n      type: 'REPLACE';\r\n      payload: { name: string; key?: string | undefined; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'PUSH';\r\n      payload: { name: string; params?: object };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP';\r\n      payload: { count: number };\r\n      source?: string;\r\n      target?: string;\r\n    }\r\n  | {\r\n      type: 'POP_TO_TOP';\r\n      source?: string;\r\n      target?: string;\r\n    };\r\n\r\nexport type StackRouterOptions = DefaultRouterOptions;\r\n\r\nexport type StackNavigationState<ParamList extends ParamListBase> =\r\n  NavigationState<ParamList> & {\r\n    /**\r\n     * Type of the router, in this case, it's stack.\r\n     */\r\n    type: 'stack';\r\n  };\r\n\r\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\r\n  /**\r\n   * Replace the current route with a new one.\r\n   *\r\n   * @param name Route name of the new route.\r\n   * @param [params] Params object for the new route.\r\n   */\r\n  replace<RouteName extends keyof ParamList>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\r\n      : [screen: RouteName, params: ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Push a new screen onto the stack.\r\n   *\r\n   * @param name Name of the route for the tab.\r\n   * @param [params] Params object for the route.\r\n   */\r\n  push<RouteName extends keyof ParamList>(\r\n    ...args: undefined extends ParamList[RouteName]\r\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\r\n      : [screen: RouteName, params: ParamList[RouteName]]\r\n  ): void;\r\n\r\n  /**\r\n   * Pop a screen from the stack.\r\n   */\r\n  pop(count?: number): void;\r\n\r\n  /**\r\n   * Pop to the first route in the stack, dismissing all other screens.\r\n   */\r\n  popToTop(): void;\r\n};\r\n\r\nexport const StackActions = {\r\n  replace(name: string, params?: object): StackActionType {\r\n    return { type: 'REPLACE', payload: { name, params } };\r\n  },\r\n  push(name: string, params?: object): StackActionType {\r\n    return { type: 'PUSH', payload: { name, params } };\r\n  },\r\n  pop(count: number = 1): StackActionType {\r\n    return { type: 'POP', payload: { count } };\r\n  },\r\n  popToTop(): StackActionType {\r\n    return { type: 'POP_TO_TOP' };\r\n  },\r\n};\r\n\r\nexport default function StackRouter(options: StackRouterOptions) {\r\n  const router: Router<\r\n    StackNavigationState<ParamListBase>,\r\n    CommonNavigationAction | StackActionType\r\n  > = {\r\n    ...BaseRouter,\r\n\r\n    type: 'stack',\r\n\r\n    getInitialState({ routeNames, routeParamList }) {\r\n      const initialRouteName =\r\n        options.initialRouteName !== undefined &&\r\n        routeNames.includes(options.initialRouteName)\r\n          ? options.initialRouteName\r\n          : routeNames[0];\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: 0,\r\n        routeNames,\r\n        routes: [\r\n          {\r\n            key: `${initialRouteName}-${nanoid()}`,\r\n            name: initialRouteName,\r\n            params: routeParamList[initialRouteName],\r\n          },\r\n        ],\r\n      };\r\n    },\r\n\r\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\r\n      let state = partialState;\r\n\r\n      if (state.stale === false) {\r\n        return state;\r\n      }\r\n\r\n      const routes = state.routes\r\n        .filter((route) => routeNames.includes(route.name))\r\n        .map(\r\n          (route) =>\r\n            ({\r\n              ...route,\r\n              key: route.key || `${route.name}-${nanoid()}`,\r\n              params:\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...route.params,\r\n                    }\r\n                  : route.params,\r\n            } as Route<string>)\r\n        );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        stale: false,\r\n        type: 'stack',\r\n        key: `stack-${nanoid()}`,\r\n        index: routes.length - 1,\r\n        routeNames,\r\n        routes,\r\n      };\r\n    },\r\n\r\n    getStateForRouteNamesChange(\r\n      state,\r\n      { routeNames, routeParamList, routeKeyChanges }\r\n    ) {\r\n      const routes = state.routes.filter(\r\n        (route) =>\r\n          routeNames.includes(route.name) &&\r\n          !routeKeyChanges.includes(route.name)\r\n      );\r\n\r\n      if (routes.length === 0) {\r\n        const initialRouteName =\r\n          options.initialRouteName !== undefined &&\r\n          routeNames.includes(options.initialRouteName)\r\n            ? options.initialRouteName\r\n            : routeNames[0];\r\n\r\n        routes.push({\r\n          key: `${initialRouteName}-${nanoid()}`,\r\n          name: initialRouteName,\r\n          params: routeParamList[initialRouteName],\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        routeNames,\r\n        routes,\r\n        index: Math.min(state.index, routes.length - 1),\r\n      };\r\n    },\r\n\r\n    getStateForRouteFocus(state, key) {\r\n      const index = state.routes.findIndex((r) => r.key === key);\r\n\r\n      if (index === -1 || index === state.index) {\r\n        return state;\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        index,\r\n        routes: state.routes.slice(0, index + 1),\r\n      };\r\n    },\r\n\r\n    getStateForAction(state, action, options) {\r\n      const { routeParamList } = options;\r\n\r\n      switch (action.type) {\r\n        case 'REPLACE': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index === -1) {\r\n            return null;\r\n          }\r\n\r\n          const { name, key, params } = action.payload;\r\n\r\n          if (!state.routeNames.includes(name)) {\r\n            return null;\r\n          }\r\n\r\n          return {\r\n            ...state,\r\n            routes: state.routes.map((route, i) =>\r\n              i === index\r\n                ? {\r\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\r\n                    name,\r\n                    params:\r\n                      routeParamList[name] !== undefined\r\n                        ? {\r\n                            ...routeParamList[name],\r\n                            ...params,\r\n                          }\r\n                        : params,\r\n                  }\r\n                : route\r\n            ),\r\n          };\r\n        }\r\n\r\n        case 'PUSH':\r\n          if (state.routeNames.includes(action.payload.name)) {\r\n            const getId = options.routeGetIdList[action.payload.name];\r\n            const id = getId?.({ params: action.payload.params });\r\n\r\n            const route = id\r\n              ? state.routes.find(\r\n                  (route) =>\r\n                    route.name === action.payload.name &&\r\n                    id === getId?.({ params: route.params })\r\n                )\r\n              : undefined;\r\n\r\n            let routes: Route<string>[];\r\n\r\n            if (route) {\r\n              routes = state.routes.filter((r) => r.key !== route.key);\r\n              routes.push({\r\n                ...route,\r\n                params:\r\n                  routeParamList[action.payload.name] !== undefined\r\n                    ? {\r\n                        ...routeParamList[action.payload.name],\r\n                        ...action.payload.params,\r\n                      }\r\n                    : action.payload.params,\r\n              });\r\n            } else {\r\n              routes = [\r\n                ...state.routes,\r\n                {\r\n                  key: `${action.payload.name}-${nanoid()}`,\r\n                  name: action.payload.name,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ];\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'POP': {\r\n          const index =\r\n            action.target === state.key && action.source\r\n              ? state.routes.findIndex((r) => r.key === action.source)\r\n              : state.index;\r\n\r\n          if (index > 0) {\r\n            const count = Math.max(index - action.payload.count + 1, 1);\r\n            const routes = state.routes\r\n              .slice(0, count)\r\n              .concat(state.routes.slice(index + 1));\r\n\r\n            return {\r\n              ...state,\r\n              index: routes.length - 1,\r\n              routes,\r\n            };\r\n          }\r\n\r\n          return null;\r\n        }\r\n\r\n        case 'POP_TO_TOP':\r\n          return router.getStateForAction(\r\n            state,\r\n            {\r\n              type: 'POP',\r\n              payload: { count: state.routes.length - 1 },\r\n            },\r\n            options\r\n          );\r\n\r\n        case 'NAVIGATE':\r\n          if (\r\n            action.payload.name !== undefined &&\r\n            !state.routeNames.includes(action.payload.name)\r\n          ) {\r\n            return null;\r\n          }\r\n\r\n          if (action.payload.key || action.payload.name) {\r\n            // If the route already exists, navigate to that\r\n            let index = -1;\r\n\r\n            const getId =\r\n              // `getId` and `key` can't be used together\r\n              action.payload.key === undefined &&\r\n              action.payload.name !== undefined\r\n                ? options.routeGetIdList[action.payload.name]\r\n                : undefined;\r\n            const id = getId?.({ params: action.payload.params });\r\n\r\n            if (id) {\r\n              index = state.routes.findIndex(\r\n                (route) =>\r\n                  route.name === action.payload.name &&\r\n                  id === getId?.({ params: route.params })\r\n              );\r\n            } else if (\r\n              (state.routes[state.index].name === action.payload.name &&\r\n                action.payload.key === undefined) ||\r\n              state.routes[state.index].key === action.payload.key\r\n            ) {\r\n              index = state.index;\r\n            } else {\r\n              for (let i = state.routes.length - 1; i >= 0; i--) {\r\n                if (\r\n                  (state.routes[i].name === action.payload.name &&\r\n                    action.payload.key === undefined) ||\r\n                  state.routes[i].key === action.payload.key\r\n                ) {\r\n                  index = i;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n\r\n            if (\r\n              index === -1 &&\r\n              action.payload.key &&\r\n              action.payload.name === undefined\r\n            ) {\r\n              return null;\r\n            }\r\n\r\n            if (index === -1 && action.payload.name !== undefined) {\r\n              const routes = [\r\n                ...state.routes,\r\n                {\r\n                  key:\r\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\r\n                  name: action.payload.name,\r\n                  path: action.payload.path,\r\n                  params:\r\n                    routeParamList[action.payload.name] !== undefined\r\n                      ? {\r\n                          ...routeParamList[action.payload.name],\r\n                          ...action.payload.params,\r\n                        }\r\n                      : action.payload.params,\r\n                },\r\n              ];\r\n\r\n              return {\r\n                ...state,\r\n                routes,\r\n                index: routes.length - 1,\r\n              };\r\n            }\r\n\r\n            const route = state.routes[index];\r\n\r\n            let params;\r\n\r\n            if (action.payload.merge) {\r\n              params =\r\n                action.payload.params !== undefined ||\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...route.params,\r\n                      ...action.payload.params,\r\n                    }\r\n                  : route.params;\r\n            } else {\r\n              params =\r\n                routeParamList[route.name] !== undefined\r\n                  ? {\r\n                      ...routeParamList[route.name],\r\n                      ...action.payload.params,\r\n                    }\r\n                  : action.payload.params;\r\n            }\r\n\r\n            return {\r\n              ...state,\r\n              index,\r\n              routes: [\r\n                ...state.routes.slice(0, index),\r\n                params !== route.params ||\r\n                (action.payload.path && action.payload.path !== route.path)\r\n                  ? {\r\n                      ...route,\r\n                      path: action.payload.path ?? route.path,\r\n                      params,\r\n                    }\r\n                  : state.routes[index],\r\n              ],\r\n            };\r\n          }\r\n\r\n          return null;\r\n\r\n        case 'GO_BACK':\r\n          if (state.index > 0) {\r\n            return router.getStateForAction(\r\n              state,\r\n              {\r\n                type: 'POP',\r\n                payload: { count: 1 },\r\n                target: action.target,\r\n                source: action.source,\r\n              },\r\n              options\r\n            );\r\n          }\r\n\r\n          return null;\r\n\r\n        default:\r\n          return BaseRouter.getStateForAction(state, action);\r\n      }\r\n    },\r\n\r\n    actionCreators: StackActions,\r\n  };\r\n\r\n  return router;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}