{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Platform } from 'expo-modules-core';\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\nif (Platform.OS !== 'web') {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(error, isFatal) {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (!ExpoErrorRecovery.saveRecoveryProps) {\n              _context.next = 3;\n              break;\n            }\n            _context.next = 3;\n            return ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n          case 3:\n            globalHandler(error, isFatal);\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', function () {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}","map":{"version":3,"names":["Platform","getRecoveryPropsToSave","ExpoErrorRecovery","OS","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","error","isFatal","wrap","_callee$","_context","prev","next","saveRecoveryProps","stop","_x","_x2","apply","arguments","isDOMAvailable","window","addEventListener"],"sources":["C:\\Users\\Jacob\\Documents\\GitHub\\jacobaw8\\Music-Mentor\\node_modules\\expo-error-recovery\\src\\ErrorRecovery.fx.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getRecoveryPropsToSave } from './ErroRecoveryStore';\nimport ExpoErrorRecovery from './ExpoErrorRecovery';\n\nif (Platform.OS !== 'web') {\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  // ErrorUtils came from react-native\n  // https://github.com/facebook/react-native/blob/1151c096dab17e5d9a6ac05b61aacecd4305f3db/Libraries/vendor/core/ErrorUtils.js#L25\n  ErrorUtils.setGlobalHandler(async (error, isFatal) => {\n    if (ExpoErrorRecovery.saveRecoveryProps) {\n      await ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n    }\n    globalHandler(error, isFatal);\n  });\n} else if (Platform.OS === 'web' && Platform.isDOMAvailable) {\n  window.addEventListener('error', () => {\n    ExpoErrorRecovery.saveRecoveryProps(getRecoveryPropsToSave());\n  });\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAE5C,SAASC,sBAAsB,QAAQ,qBAAqB;AAC5D,OAAOC,iBAAiB,MAAM,qBAAqB;AAEnD,IAAIF,QAAQ,CAACG,EAAE,KAAK,KAAK,EAAE;EACzB,IAAMC,aAAa,GAAGC,UAAU,CAACC,gBAAgB,EAAE;EACnD;EACA;EACAD,UAAU,CAACE,gBAAgB;IAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAAOC,KAAK,EAAEC,OAAO;MAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA,KAC3CjB,iBAAiB,CAACkB,iBAAiB;cAAAH,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAC/BjB,iBAAiB,CAACkB,iBAAiB,CAACnB,sBAAsB,EAAE,CAAC;UAAA;YAErEG,aAAa,CAACS,KAAK,EAAEC,OAAO,CAAC;UAAC;UAAA;YAAA,OAAAG,QAAA,CAAAI,IAAA;QAAA;MAAA,GAAAT,OAAA;IAAA,CAC/B;IAAA,iBAAAU,EAAA,EAAAC,GAAA;MAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;IAAA;EAAA,IAAC;CACH,MAAM,IAAIzB,QAAQ,CAACG,EAAE,KAAK,KAAK,IAAIH,QAAQ,CAAC0B,cAAc,EAAE;EAC3DC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAK;IACpC1B,iBAAiB,CAACkB,iBAAiB,CAACnB,sBAAsB,EAAE,CAAC;EAC/D,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}