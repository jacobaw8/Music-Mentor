{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _defineProperty from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"C:/Users/Jacob/Documents/GitHub/jacobaw8/Music-Mentor/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nvar VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport var shouldPreventRemove = function shouldPreventRemove(emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) {\n  var _action$VISITED_ROUTE;\n  var nextRouteKeys = nextRoutes.map(function (route) {\n    return route.key;\n  });\n\n  // Call these in reverse order so last screens handle the event first\n  var removedRoutes = currentRoutes.filter(function (route) {\n    return !nextRouteKeys.includes(route.key);\n  }).reverse();\n  var visitedRouteKeys = // @ts-expect-error: add this property to mark that we've already emitted this action\n  (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n  var beforeRemoveAction = _objectSpread(_objectSpread({}, action), {}, _defineProperty({}, VISITED_ROUTE_KEYS, visitedRouteKeys));\n  var _iterator = _createForOfIteratorHelper(removedRoutes),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var route = _step.value;\n      var _beforeRemoveListener;\n      if (visitedRouteKeys.has(route.key)) {\n        // Skip if we've already emitted this action for this screen\n        continue;\n      }\n\n      // First, we need to check if any child screens want to prevent it\n      var isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n      if (isPrevented) {\n        return true;\n      }\n      visitedRouteKeys.add(route.key);\n      var event = emitter.emit({\n        type: 'beforeRemove',\n        target: route.key,\n        data: {\n          action: beforeRemoveAction\n        },\n        canPreventDefault: true\n      });\n      if (event.defaultPrevented) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n};\nexport default function useOnPreventRemove(_ref) {\n  var getState = _ref.getState,\n    emitter = _ref.emitter,\n    beforeRemoveListeners = _ref.beforeRemoveListeners;\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n    addKeyedListener = _React$useContext.addKeyedListener;\n  var route = React.useContext(NavigationRouteContext);\n  var routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(function () {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, function (action) {\n        var state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":{"version":3,"names":["React","NavigationBuilderContext","NavigationRouteContext","VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","_action$VISITED_ROUTE","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","_objectSpread","_defineProperty","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","_beforeRemoveListener","has","isPrevented","call","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","err","e","f","useOnPreventRemove","_ref","getState","_React$useContext","useContext","addKeyedListener","routeKey","useEffect","state","routes"],"sources":["C:\\Users\\Jacob\\Documents\\GitHub\\jacobaw8\\Music-Mentor\\node_modules\\@react-navigation\\core\\src\\useOnPreventRemove.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}